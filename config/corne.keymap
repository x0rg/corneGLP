/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    combos {
        compatible = "zmk,combos";

        semcol {
            bindings = <&kp SEMI>;
            key-positions = <32 33>;
            timeout-ms = <50>;
            layers = <0>;
        };

        cpslck {
            bindings = <&kp CAPSLOCK>;
            key-positions = <24 35>;
            layers = <0>;
        };

        parentheses_left {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <16 15>;
            layers = <0>;
        };

        parentheses_right {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <19 20>;
            layers = <0>;
        };

        bracket_left {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <3 4>;
            layers = <0>;
        };

        bracket_right {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <8 7>;
            layers = <0>;
        };

        colon {
            bindings = <&kp COLON>;
            key-positions = <20 21>;
            layers = <0>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <15 14>;
            layers = <0>;
        };

        brace_left {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <27 28>;
            layers = <0>;
        };

        brace_right {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <31 32>;
            layers = <0>;
        };

        less_than {
            bindings = <&kp LESS_THAN>;
            key-positions = <2 3>;
            layers = <0>;
        };

        bigger_than {
            bindings = <&kp GREATER_THAN>;
            key-positions = <8 9>;
            layers = <0>;
        };

        hyphen {
            bindings = <&kp MINUS>;
            key-positions = <28 31>;
            layers = <0>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <4 7>;
            layers = <0>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <16 19>;
            layers = <0>;
        };

        Pipe {
            bindings = <&kp PIPE>;
            key-positions = <27 26>;
            layers = <0>;
        };

        astrsk {
            bindings = <&kp ASTERISK>;
            key-positions = <3 8>;
            layers = <0>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <15 20>;
            layers = <0>;
        };

        excl {
            bindings = <&kp EXCL>;
            key-positions = <27 32>;
            layers = <0>;
        };

        ampersand {
            bindings = <&kp AMPERSAND>;
            key-positions = <17 18>;
            layers = <0>;
        };

        underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <29 30>;
            layers = <0>;
        };

        backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <21 22>;
            layers = <0>;
        };

        tilde {
            bindings = <&kp TILDE>;
            key-positions = <14 13>;
            layers = <0>;
        };
    };

    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 38 39 40 41 37 36>;
            require-prior-idle-ms = <150>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
        };

        lrt: lrt {
            compatible = "zmk,behavior-hold-tap";
            label = "LRT";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | ENT |   | SPC | RSE  | ALT |

            bindings = <
&kp TAB         &kp Q  &kp W  &kp E          &kp R  &kp T        &kp Y      &kp U  &kp I         &kp O    &kp P     &kp BSPC
&kp LCTRL       &kp A  &kp S  &kp D          &kp F  &kp G        &kp H      &kp J  &kp K         &kp L    &kp SQT   &kp ESC
&kp LEFT_SHIFT  &kp Z  &kp X  &kp C          &kp V  &kp B        &kp N      &kp M  &kp COMMA     &kp DOT  &kp FSLH  &kp RIGHT_SHIFT
                              &kp LEFT_META  &mo 1  &kp ENTER    &kp SPACE  &mo 2  &kp LEFT_ALT
            >;
        };

        Nav {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB      &kp PG_DN     &kp PG_UP     &kp INS         &kp N4     &kp N5    &kp N6    &kp N7    &kp N8        &kp N9     &kp N0  &kp BSPC
&tog 4       &sk LEFT_GUI  &sk LEFT_ALT  &sk LEFT_SHIFT  &sk LCTRL  &trans    &kp LEFT  &kp DOWN  &kp UP        &kp RIGHT  &trans  &tog 5
&bootloader  &trans        &trans        &trans          &trans     &trans    &kp DEL   &kp HOME  &kp END       &trans     &trans  &trans
                                         &kp LGUI        &trans     &trans    &trans    &trans    &kp LEFT_ALT
            >;
        };

        Num_Sym {
            bindings = <
&trans  &trans              &kp N7        &kp N8        &kp N9        &trans    &kp UNDERSCORE  &kp AMPS  &kp STAR   &kp MINUS  &kp PLUS       &trans
&trans  &kp N0              &kp NUMBER_4  &kp N5        &kp NUMBER_6  &trans    &kp EQUAL       &kp DLLR  &kp PRCNT  &kp CARET  &kp BACKSLASH  &kp GRAVE
&trans  &sk LG(LEFT_SHIFT)  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans    &kp MINUS       &kp EXCL  &kp AT     &kp HASH   &kp PIPE       &kp TILDE
                                          &trans        &trans        &trans    &trans          &trans    &trans
            >;
        };

        Fn {
            bindings = <
&kp F18  &kp F15  &kp F7  &kp F8  &kp F9  &kp F12    &bt BT_SEL 0  &kp C_VOLUME_UP  &kp C_MUTE        &kp C_VOL_DN  &bt BT_CLR    &sys_reset
&kp F17  &kp F14  &kp F4  &kp F5  &kp F6  &kp F11    &bt BT_SEL 1  &kp C_PREVIOUS   &kp C_PLAY_PAUSE  &kp C_NEXT    &out OUT_TOG  &bootloader
&kp F16  &kp F13  &kp F1  &kp F2  &kp F3  &kp F10    &bt BT_SEL 2  &trans           &trans            &trans        &out OUT_USB  &out OUT_BLE
                          &trans  &trans  &trans     &bootloader   &trans           &trans
            >;
        };

        MouseNav {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans      &trans          &trans          &trans        &trans           &trans  &tog 4
&trans  &trans  &trans  &trans  &mkp MB3  &trans      &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans      &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &trans  &trans
                        &trans  &mkp MB4  &mkp MB1    &mkp MB2        &mkp MB5        &trans
            >;
        };

        Gaming1 {
            bindings = <
&kp ESCAPE  &kp T           &kp Q  &kp W           &kp E  &kp R        &trans  &trans  &trans  &trans  &trans  &trans
&kp TAB     &kp LEFT_SHIFT  &kp A  &kp S           &kp D  &kp F        &trans  &trans  &trans  &trans  &trans  &trans
&kp I       &kp LCTRL       &kp Z  &kp X           &kp C  &kp V        &trans  &trans  &trans  &trans  &trans  &trans
                                   &msc SCRL_DOWN  &mo 6  &kp SPACE    &tog 5  &trans  &trans
            >;
        };

        GamingLayer2 {
            bindings = <
&trans  &kp NUMBER_6  &kp N7        &trans        &kp N8        &kp N9    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans        &trans        &kp N0    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5    &trans  &trans  &trans  &trans  &trans  &trans
                                    &trans        &trans        &trans    &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        func_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
